#!/usr/bin/env python3

#-------------------------------------------------------------------------------
# Name:        speciesFreqCumul
# Purpose:     output file containining statistics GOfreq for each taxon category
#              generated by the script clusterTaxon.py
#
# Author:      stefa
#
# Created:     21/08/2019
# Copyright:   (c) stefa 2019
# Licence:     GPL
#-------------------------------------------------------------------------------

import sys, argparse, copy
from owlready2 import *
from owlLibrary2 import *

def main(args):

    ## load list of GO that can be used to define constraints
    GO = {}
    goowl = GoOwl(args['owl'],'http://purl.obolibrary.org/obo/')
    with open(args['goa_freq'], "r") as goafreq:
        for line in goafreq:
            line = line.strip()
            if line.startswith("#"):
                continue
            ##END IF
            values = line.split("\t")
            if int(values[6]) >= args['cutoff']:
                GO[values[0]] = {'freq': values[6], 'desc': values[1], 'subont': values[2]}
            ##END IF
        ##END FOR
    ##END WITH
    goafreq.close()



    ## open cumulated freq of the subdivisions and create never_in

    go_list = set()
    with open(args['out'], "w") as out:
        with open(args['cumul'], "r") as cumul:
            for line in cumul:
                line = line.strip()
                if line.startswith('>'):
                    if go_list:
                        for go in go_list:
                            details = goowl.go_single_details(go)
                            out.write(f'{go}\tnever_in\t{details["name"]}\t{details["namespace"]}\n')
                    out.write(f'{line}\n')
                    go_list.clear()
                else:
                    GOval = line.split("\t")
                    ##print(GOval[0])
                    if GOval[0] in GO:
                        if int(GOval[1]) == 0:
                            go_list.add(GOval[0])
                            descendants = goowl.go_descendants_using_valid_edges(GOval[0])
                            for items in descendants.keys():
                                go_list.add(items)
                            #out.write(f'{GOval[0]}\tnever_in\t{GO[GOval[0]]["desc"]}\t{GO[GOval[0]]["subont"]}\n')
                        if int(GOval[1]) == 1 and GOval[5] == 'P':
                            go_list.add(GOval[0])
                            descendants = goowl.go_descendants_using_valid_edges(GOval[0])
                            for items in descendants.keys():
                                go_list.add(items)
            for go in go_list:
                details = goowl.go_single_details(go)
                out.write(f'{go}\tnever_in\t{details["name"]}\t{details["namespace"]}\n')
                        ##END IF
                    ##END IF
                ##END IF
            ##END FOR
        ##END WITH
    ##END WITH
    cumul.close()
    out.close()
##END DEF

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create GO cumulated frequencies in GOA and GO occurrences in GOA')
    parser.add_argument('-goa_freq', metavar='INPUT_FILE',  help='GOAfreq file generated by GOAfreq.py', required=True)
    parser.add_argument('-owl', metavar='INPUT_FILE', help='go-plus.owl file', required=True)
    parser.add_argument('-cutoff', metavar='INTEGER', type=int, help='cutoff of GO occurrence to be considered as potential constraint (integer)', required=True)
    parser.add_argument('-cumul', metavar='INPUT_FILE',  help='input file generated by the script speciesFreqCumul.py containing cumulated frequencies in GOA', required=True)
    parser.add_argument('-out', metavar='OUTPUT_FILE',  help='output file containining the never_in GO for each subdivision', required=True)
    args = vars(parser.parse_args())
    main(args)
#END MAIN
