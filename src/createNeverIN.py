#!/usr/bin/env python3

#-------------------------------------------------------------------------------
# Name:        speciesFreqCumul
# Purpose:     output file containining statistics GOfreq for each taxon category
#              generated by the script clusterTaxon.py
#
# Author:      Stefano, Emilio
#
# Created:     21/08/2019
# Last edited: 08/02/2024
# Copyright:   (c) Stefano 2019
# Licence:     GPL
#-------------------------------------------------------------------------------

import sys
import argparse
import os
from owlready2 import *
from owlLibrary2 import *


def get_args():
    parser = argparse.ArgumentParser(description='Create GO cumulated frequencies in GOA and GO occurrences in GOA')

    parser.add_argument('-g', '--goa_freq', metavar='INPUT_FILE',  help='GOAfreq file generated by GOAfreq.py', required=True)
    parser.add_argument('-w', '--owl', metavar='INPUT_FILE', help='go-plus.owl file', required=True)
    parser.add_argument('-c', '--cutoff', metavar='INTEGER', type=int, help='cutoff of GO occurrence to be considered as potential constraint (integer)', required=True)
    parser.add_argument('-u', '--cumul', metavar='INPUT_FILE',  help='input file generated by the script speciesFreqCumul.py containing cumulated frequencies in GOA', required=True)
    parser.add_argument('-o', '--out', metavar='OUTPUT_FILE',  help='output file containining the never_in GO for each subdivision', required=True)

    return vars(parser.parse_args())


def load_go_list(go_owl, goa_freq, cutoff):
    go = {}
    with open(goa_freq, 'r') as goafreq:
        for line in goafreq:
            if line.startswith("#"):
                # skip comments
                continue

            values = line.strip().split('\t')
            # values[0] = go_id / values[1] = go_descendant / values[2] = go_subont / values[6] = go_freq_goa
            if int(values[6]) >= cutoff:
                go[values[0]] = {'freq': values[6], 'desc': values[1], 'subont': values[2]}

    return go


def create_never_in(go_dict, out_file, cumul_file, go_owl):
    go_list = set()
    with open(out_file, 'w') as out, open(cumul_file, 'r') as cumul:
        for line in cumul:
            if line.startswith('>'):
                if go_list:
                    write_go(go_list, go_owl, out)
                out.write(f'{line}')
                go_list.clear()
            else:
                values = line.strip().split('\t')
                # values[0] = go_id / values[1] = corpus_cumul / values[5] = go_pant
                if values[0] in go_dict:
                    if int(values[1]) == 0:
                        update_go_list(go_list, values[0], go_owl)
                        continue
                    if int(values[1]) <= 1 and values[5] == 'P':
                        update_go_list(go_list, values[0], go_owl)
                        continue

        if go_list:
            write_go(go_list, go_owl, out)


def update_go_list(go_list, go_id, go_owl):
    go_list.add(go_id)
    descendants = go_owl.go_descendants_using_valid_edges(go_id)
    go_list.update(set(descendants.keys()))


def write_go(go_list, go_owl, out):
    ## write output file
    for go in go_list:
        details = go_owl.go_single_details(go)
        out.write(f'{go}\tnever_in\t{details["name"]}\t{details["namespace"]}\n')


if __name__ == '__main__':
    args = get_args()
    owl_file = args['owl']
    goa_freq = args['goa_freq']
    cutoff = args['cutoff']
    out_file = args['out']
    cumul_file = args['cumul']

    if not os.path.exists(owl_file):
        print(f'Input OWL file provided {owl_file} does not exist!', file=sys.stderr)
        raise FileNotFoundError

    if not os.path.exists(goa_freq):
        print(f'Input FREQ file provided {goa_freq} does not exist!', file=sys.stderr)
        raise FileNotFoundError

    if not os.path.exists(cumul_file):
        print(f'Input CUMUL file provided {cumul_file} does not exist!', file=sys.stderr)
        raise FileNotFoundError

    out_path, basename = os.path.split(out_file)
    if not os.path.exists(out_path):
        print(f'WARNING: output path {out_path} does not exist, creating it', file=sys.stderr)
        os.makedirs(out_path)

    go_owl = GoOwl(owl_file,'http://purl.obolibrary.org/obo/')

    ## load list of GO that can be used to define constraints
    go_dict = load_go_list(go_owl, goa_freq, cutoff)

    ## open cumulated freq of the subdivisions and create never_in
    go_list = create_never_in(go_dict, out_file, cumul_file, go_owl)
