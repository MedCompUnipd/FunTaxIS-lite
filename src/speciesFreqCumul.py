#!/usr/bin/env python3

#-------------------------------------------------------------------------------
# Name:        speciesFreqCumul
# Purpose:     output file containining statistics GOfreq for each taxon category
#              generated by the script clusterTaxon.py
#
# Author:      stefa
#
# Created:     21/08/2019
# Copyright:   (c) stefa 2019
# Licence:     GPL
#-------------------------------------------------------------------------------


import sys, argparse, copy
from owlready2 import *
from owlLibrary2 import *


def main(args):

    goowl = GoOwl(args['owl'],"http://purl.obolibrary.org/obo/")
    status = False
    taxon = ''
    GO = {}
    GOP = {}
    with open(args['out_freq'], "w") as out:
        with open(args['freq'], "r") as cluster:
            for line in cluster:
                line = line.strip()
                if line.startswith('>'):
                    if taxon:
                        corpusCumul = goowl.cumulative_freq_corpus_ml(GO)
                        out.write(f'>{taxon}\n')
                        for go in sorted(corpusCumul):
                            freq = 0
                            pant = 'N'
                            if go in GO:
                                freq = GO[go]
                            if go in GOP:
                                pant = GOP[go]
                            #END IF
                            details = goowl.go_single_details(go)
                            out.write(f'{go}\t{corpusCumul[go]}\t{freq}\t{details["namespace"]}\t{details["name"]}\t{pant}\n')
                        ##END FOR
                        status = False
                        GO.clear()
                        GOP.clear()
                        corpusCumul.clear()
                    ## END IF
                    taxon = line[1:len(line)]
                else:
                    ### take GOs and freq
                    status = True
                    GOval = line.split("\t")
                    GO[GOval[0].strip()] = int(GOval[1].strip())
                    GOP[GOval[0].strip()] = GOval[4].strip()
                ## END IF
            ## END FOR
        ## END WITH
        cluster.close()
        if status:
            corpusCumul = goowl.cumulative_freq_corpus_ml(GO)
            out.write(f'>{taxon}\n')
            for go in sorted(corpusCumul):
                freq = 0
                pant = 'N'
                if go in GO:
                    freq = GO[go]
                if go in GOP:
                    pant = GOP[go]
                #END IF
                details = goowl.go_single_details(go)
                out.write(f'{go}\t{corpusCumul[go]}\t{freq}\t{details["namespace"]}\t{details["name"]}\t{pant}\n')
            ##END FOR
            status = False
            GOP.clear()
            GO.clear()
        ##END IF
    ##END WITH
    out.close()
##END DEF

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create GO cumulated frequencies in GOA and GO occurrences in GOA')
    parser.add_argument('-owl', metavar='INPUT_FILE',  help='go-plus.owl file', required=True)
    parser.add_argument('-freq', metavar='INPUT_FILE',  help='file containing GO freq generated by the script clusterTaxon.py', required=True)
    parser.add_argument('-out_freq', metavar='OUTPUT_FILE',  help='output file containining cumulated freq for each taxa subdivision', required=True)
    args = vars(parser.parse_args())
    main(args)
#END MAIN
