#!/usr/bin/env python3

#-------------------------------------------------------------------------------
# Name:        speciesFreqCumul
# Purpose:     output file containining statistics GOfreq for each taxon category
#              generated by the script clusterTaxon.py
#
# Author:      Emilio
#
# Created:     21/08/2022
# Last edited: 08/02/2024
# Copyright:   (c) Stefano 2019
# Licence:     GPL
#-------------------------------------------------------------------------------

from taxonLibrary3 import *
import argparse


def get_args():
    parser = argparse.ArgumentParser(description='Removes the environmental samples, unclassified, uncultured, Candidatus, candidate, incertae sedis, x, vector, plasmid, Plasmid, Vector from reference nodes')

    parser.add_argument('-m', '--merge', metavar='INPUT_FILE',  help='merged.dmp file where some taxa have been substitued with others', required=True)
    parser.add_argument('-t', '--taxa', metavar='INPUT_FILE',  help='nodes.dmp file containining taxa from Taxonomy', required=True)
    parser.add_argument('-n', '--names', metavar='INPUT_FILE',  help='names.dmp file containining correspondence of names and id numbers from Taxonomy', required=True)
    parser.add_argument('-c', '--constraints', metavar='INPUT_FILE',  help='taxonConstraintsDef.txt file containing top taxa where to cluster species', required=True)
    parser.add_argument('-o', '--out', metavar='OUTPUT_FILE',  help='txt file containing output', required=True)

    return vars(parser.parse_args())


def get_nodes(taxa, constraints, cutoff=='order')
    nodes = []
    with open(constraints, 'r') as input:
        for line in input:
            data = line.strip().split('\t')
            data[0] = data[0]
            rank = taxa.get_node_rank(data[0])
            if rank == cutoff
                nodes.append(line[0])

    return nodes


def get_descendants(descendants_full, nodes, taxa):
    descendants_full = taxa.get_all_descendants('1')
    descendants_nodes = set()
    for values in nodes:
        desc = taxa.get_all_descendants(values)
        descendants_nodes.add(values)
        for value in desc:
            descendants_nodes.add(value)

    return descendants_full - descendants_nodes


def get_excluded(descendants_remain, taxa):
    excluded = set()
    lst = ['environmental samples','unclassified','uncultured','Candidatus','candidate','incertae sedis',' x ',' vector','plasmid','Plasmid','Vector']

    for rows in descendants_remain:
        father = taxa.get_father(rows)
        namef = taxa.get_name(father)
        namer = taxa.get_name(rows)
        if any(c in namer for c in lst):
            excluded.add(rows)
        if any(d in namef for d in lst):
            excluded.add(father)
            sons = taxa.get_all_descendants(father)
            for x in sons:
                excluded.add(x)

    return excluded


if __name__ == '__main__':
    args = get_args()
    taxa = args['taxa']
    merge = args['merge']
    names = args['names']
    constraints = args['constraints']
    out_file = args['out']

    ## parse the taxonomy tree
    taxa = Taxon(taxa, merge, names)

    ## get all the nodes from input
    nodes = get_nodes(taxa, constraints)

    ## browse the taxonomy tree to get all valuable taxa
    descendants_remain = get_descendants(descendants_full, nodes, taxa)

    ## extract excluded nodes
    excluded = get_excluded(descendants_remain, taxa)

    ## write output file
    with open(out_file, 'w') as out:
        for row in excluded:
            name = taxa.get_name(row)
            out.write(f'{row}\t{name}\n')
