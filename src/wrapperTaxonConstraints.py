#!/usr/bin/env python3

#-------------------------------------------------------------------------------
# Name:        wrapperTaxonConstraints.py
# Purpose:     takes taxonConstraints file of taxa for which to calculate constraints
#              takes file of NEVER_IN generated by createNeverIN.py
#              rewrite output with the same format of the output generated by
#              taxonConstraintsGOconsortium.py
#
# Author:      Stefano, Emilio
#
# Created:     02/01/2020
# Last edited: 14/02/2024
# Copyright:   (c) Stefano 2019
# Licence:     GPL
#-------------------------------------------------------------------------------


import sys
import argparse
import os
from owlready2 import *
from taxonLibrary3 import *


def get_args():
    parser = argparse.ArgumentParser(description='takes taxonConstraints file of taxa for which to calculate constraints takes file of NEVER_IN generated by createNeverIN.py rewrite output with the same format of the output generated by taxonConstraintsGOconsortium.py')

    parser.add_argument('-c', '--constraints', metavar='INPUT_FILE',  help='taxonConstraintsDef.txt file containing top taxa where to cluster species', required=True)
    parser.add_argument('-n', '--never_in', metavar='INPUT_FILE',  help='file output of createNeverIN.py where each taxa and its GOs are reported in mulfasta format', required=True)
    parser.add_argument('-o', '--out', metavar='OUTPUT_FILE',  help='txt file containing output', required=True)

    return = vars(parser.parse_args())


def parse_constraints(constraints):
    son_parent, union = {}, {}
    with open(constraints, 'r') as constraints:
        for line in constraints:
            if line.startswith('#'):
                # skip comments
                continue

            values = line.strip().split('\t')
            # values[0] = taxon_id / values[1] = taxon_name / values[4] = parent_name / values[3] = stop_other

            son_parent[values[0]]  = values[4]
            if not values[4] in union:
                union[values[4]] = {}
                union[values[4]][values[0]] = values[1]
            else:
                union[values[4]][values[0]] = values[1]

    return son_parent, union


if __name__ == "__main__":
    args = get_args()
    constraints = args['constraints']
    never_in = args['never_in']
    out_file = args['out_file']

    if not os.path.exists(constraints):
        print(f'Input CONSTRAINTS file provided {constraints} does not exist!', file=sys.stderr)
        raise FileNotFoundError

    if not os.path.exists(never_in):
        print(f'Input NEVER IN file provided {never_in} does not exist!', file=sys.stderr)
        raise FileNotFoundError

    out_path, basename = os.path.split(out_file)
    if not os.path.exists(out_path):
        print(f'WARNING: output path {out_path} does not exist, creating it')
        os.makedirs(out_path)

    # something...
    son_parent, union = parse_constraints(constraints)

    # writing output file
    taxon = ''
    with open(out_file,'w') as out, open(never_in,'r') as never_in:
        for line in never_in:
            line = line.strip()
            if line.startswith('>'):
                taxon = line.lstrip('>')
            else:
                values = line.split('\t')
                if taxon in union:
                    for taxon_id in union[taxon]:
                        taxon_name = union[taxon][taxon_id]
                        out.write(f'{values[0]}\t{values[2]}\t{values[3]}\t{taxon_id}\t{taxon_name}\tNever in taxon\n')
