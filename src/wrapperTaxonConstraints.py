#!/usr/bin/env python3

#-------------------------------------------------------------------------------
# Name:        wrapperTaxonConstraints.py
# Purpose:     takes taxonConstraints file of taxa for which to calculate constraints
#              takes file of NEVER_IN generated by createNeverIN.py
#              rewrite output with the same format of the output generated by
#              taxonConstraintsGOconsortium.py
#
# Author:      stefano
#
# Created:     02/01/2020
# Copyright:   (c) stefano 2019
# Licence:     GPL
#-------------------------------------------------------------------------------


import sys, argparse, copy, re
from owlready2 import *
from taxonLibrary3 import *

def main(args):

    parent_son = {}
    son_parent = {}
    union = dict()
    with open(args['constraints'],'r') as constraints:
        for line in constraints:
            if line.startswith('#'):
                continue
            #END IF
            line = line.strip()
            values = line.split("\t")
            id_taxon    = values[0].strip()
            taxon_name  = values[1].strip()
            parent_name = values[4].strip()
            stopOther   = values[3].strip()

            son_parent[id_taxon]  = parent_name
            if not parent_name in union:
                union[parent_name] = dict()
                union[parent_name][id_taxon] = taxon_name
            else:
                union[parent_name][id_taxon] = taxon_name

        #END FOR
    #END WITH
    constraints.close()
    taxon = ''
    with open(args['out'],'w') as out:
        with open(args['never_in'],'r') as never_in:
            for line in never_in:
                line = line.strip()
                if line.startswith('>'):
                    taxon = line[1:len(line)].strip()
                else:
                    values = line.split('\t')
                    if taxon in union:
                        for idTaxon in union[taxon]:
                            taxname = union[taxon][idTaxon]
                            out.write(f'{values[0]}\t{values[2]}\t{values[3]}\t{idTaxon}\t{taxname}\tNever in taxon\n')
                        ##END FOR
                    ##END IF
                ##END IF
            ##END FOR
        ##END WITH
    ##END WITH
    out.close()
##END MAIN

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='takes taxonConstraints file of taxa for which to calculate constraints takes file of NEVER_IN generated by createNeverIN.py rewrite output with the same format of the output generated by taxonConstraintsGOconsortium.py')
    parser.add_argument('-constraints', metavar='INPUT_FILE',  help='taxonConstraintsDef.txt file containing top taxa where to cluster species', required=True)
    parser.add_argument('-never_in', metavar='INPUT_FILE',  help='file output of createNeverIN.py where each taxa and its GOs are reported in mulfasta format', required=True)
    parser.add_argument('-out', metavar='OUTPUT_FILE',  help='txt file containing output', required=True)
    args = vars(parser.parse_args())
    main(args)
#END MAIN


