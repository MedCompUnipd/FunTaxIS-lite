#!/bin/bash

intermediate=0
download=0
full=0
constraints=0
setting=""

usage() {
    echo "Usage: $0 -s <config_file> [OPTIONS]"
    echo "                                                  "
    echo "This is the FunTaxIS-lite pipeline. It generates Taxonomic Constraints for species of interest. The output produced is a list of 'NEVER IN' (forbidden) GO terms"
    echo "                                                                                                                      "
    echo "OPTIONS:"
    echo "                                                                                                                          "
    echo "-c, --constraints         Executes the generate_constraints.sh script. This takes in input the species and calculates the Taxon Constraints."
    echo "-d, --download            Executes the download.sh script. This is the first step of the pipeline."
    echo "                          This script download the latest release of GO, GOA and Taxonomy."
    echo "-f, --full                Executes the full pipeline (including download.sh, generate_intermediate.sh and generate_constraints.sh)."
    echo "-h, --help                Prints this help message"
    echo "-i, --intermediate        Executes the generate_intermediate.sh script. This is the middle step of the pipeline."
    echo "                          It produces intermediate files required to generate the Taxon Constraints"
    echo "-s, --settings            This is mandatory. The required configuration file, provided in this repository, contains all the input"
    echo "                          path files to correctly execute the pipeline."
    echo "                                                                                                                                  "
    echo "----------------------<config_file.cfg>----------------------"
    echo "                                                              "
    echo "folder:                   Path of the main folder containing all the required files to correctly run the tool."
    echo "go:                       Path of the GO graph file. The file must be in OWL format and the PLUS version."
    echo "goa:                      Path of the GOA gaf file"
    echo "taxonomy:                 Path of the taxonomy taxondump folder (be sure to write the '/' at the end of the path!)."
    echo "taxon-def:                Path of the reference taxon nodes defined by the tool to generate Taxon Constraints (no changes needed)."
    echo "unclassified:             Path of the unclassified species, excluded by the tool. (no changes needed)."
    echo "species:                  Path of the species you want to calculate the Taxon Constraints on. You can edit this file, according to the species"
    echo "                          (or the list of species) of your interest."
    echo "manual-constraints:       Path of the manual constraints file. You can edit this by adding some experimentally validated constraints."
    echo "                          This file is merged with the automatic constraints generated by the tool and those provided by the GOC."
    echo "cutoff:                   The GO terms with a cumulative frequency in GOA above this threshold are discarded"
    echo "type:                     Type of constraints. Allowed values are 'automatic','auto' or 'a' for FunTaxIS-lite constraints only."
    echo "                          'GOConsortium', 'goc' or 'g' for Gene Ontology Consortium constraints only (Default: no value for both)."
    echo "results:                  Path of the output results"
    exit 1
}


[ $# -eq 0 ] && usage
# Custom options parser for long options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h | --help) usage;;
        -i | --intermediate) intermediate=1;;
        -d | --download) download=1;;
        -f | --full) full=1;;
        -c | --constraints) constraints=1;;
        -s | --settings)
            shift
            if [[ $# -eq 0 ]]; then
                echo "Option -s requires an argument." >&2
                exit 1
            fi
            setting="$1"
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Invalid option: $1" >&2
            usage
            ;;
    esac
    shift
done

# Process remaining arguments after --
while [ $# -gt 0 ]; do
    case $1 in
        *)
            # Handle non-option arguments here
            ;;
    esac
    shift
done

# ...

if [ ${full} -eq 1 ]; then
    chmod -R 750 ./src
    bash ./download.sh "$setting"
    bash ./generate_intermediate.sh "$setting"
    bash ./generate_constraints.sh "$setting"
else
    if [ ${download} -eq 1 ]; then
        chmod -R 750 ./src
        bash ./download.sh "$setting"
    fi

    if [ ${intermediate} -eq 1 ]; then
        chmod -R 750 ./src
        bash ./generate_intermediate.sh "$setting"
    fi

    if [ ${constraints} -eq 1 ]; then
        chmod -R 750 ./src
        bash ./generate_constraints.sh "$setting"
    fi
fi
